plugins {
    id "com.moowork.node" version "0.13"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://repo.maven.apache.org/maven2" }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

version '1.0.0'
ext['snippetsDir'] = file('build/generated-snippets')

dependencies {
    implementation project(':coffeeshop-domain')

    // kotlin
    implementation(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion)
    implementation(group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlinVersion)

    // etc
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin:2.13.2')

    // mysql
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa')
    implementation(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate5')
    runtimeOnly(group: 'mysql', name: 'mysql-connector-java')

    // elasticsearch
    implementation('org.springframework.boot:spring-boot-starter-data-elasticsearch')
    implementation(group: 'org.springframework.data', name: 'spring-data-elasticsearch', version: '4.1.3')
    implementation(group: 'org.elasticsearch', name: 'elasticsearch', version: '7.10.2')

    implementation('com.auth0:java-jwt:3.19.1')
    implementation('io.dropwizard.metrics:metrics-core:4.2.9')

    implementation(group: 'io.netty', name: 'netty-resolver-dns', version: '4.1.43.Final')
    implementation(group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.0')
    implementation(group: 'com.google.guava', name: 'guava', version: 'r05')

    implementation(group: 'org.jolokia', name: 'jolokia-core', version: '1.6.0')


    implementation("org.springframework.restdocs:spring-restdocs-webtestclient:2.0.6.RELEASE")
    implementation 'org.asciidoctor:asciidoctorj:2.4.1'
    //asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.6.RELEASE")

    testImplementation('junit:junit:4.13.2')
    testImplementation('org.springframework.restdocs:spring-restdocs-restassured')
    testImplementation('io.rest-assured:json-path:4.0.0')
    testImplementation('io.rest-assured:xml-path:4.0.0')

    testImplementation('org.springframework.boot:spring-boot-starter-test:2.6.7')
    testImplementation('com.squareup.okhttp3:okhttp:4.9.3')
    testImplementation('com.squareup.okhttp3:mockwebserver:4.9.3')

    // mock server
    implementation("org.mock-server:mockserver-netty:5.13.2")
    implementation("org.mock-server:mockserver-client-java:5.13.2")
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor {
    delete "src/main/resources/public/docs/index.html"

    inputs.dir snippetsDir
    dependsOn test

    def folder = new File("src/main/resources/public/docs")
    if (!folder.exists()) {
        folder.mkdirs()
    }
    copy {
        from "${outputDir}/html5"
        into "src/main/resources/public/docs"

    }
}

jar {
    dependsOn asciidoctor
    archiveName "service-${project.name}.jar"
}

eclipseJdt.onlyIf { false }
cleanEclipseJdt.onlyIf { false }

bootRun {
    dependsOn asciidoctor
    if (System.properties["spring.profiles.active"] == null) {
        systemProperty "spring.profiles.active", "LOCAL"
    } else {
        systemProperty "spring.profiles.active", System.properties["spring.profiles.active"]
    }

    systemProperty "server.port", System.properties["server.port"]
}
