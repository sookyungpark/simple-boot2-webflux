buildscript {
    ext {
        springBootVersion = '2.6.7'
        artifactRepoBase = "http://oss.jfrog.org/artifactory"
        baseVersion = "1.0.1"
        jacksonVersion = "2.13.2"
        kotlinVersion = "1.6.21"
        micrometerVersion = '1.1.3'
        platformLogVersion = "1.2.0"
        serviceProjects = [ "coffeeshop-api" ]
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.maven.apache.org/maven2" }

    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'de.undercouch:gradle-download-task:3.4.3'
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }

    ext["kafka.version"] = '0.9.0.0'
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'groovy'
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11
    targetCompatibility = 11

    group = 'com.customproject.coffeeshop'

    configurations.implementation {
        exclude module: 'jetty-server'
        exclude group: 'javax.servlet'
    }

    configurations.all {
        exclude module: 'spring-boot-starter-web'
        exclude module: 'spring-boot-starter-jetty'
        exclude module: 'rest-assured'
        exclude module: 'kotlin-stdlib-jdk8'

        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

subprojects {
    processResources {
        String commitVersion = System.getProperty("commitVersion")
        if(commitVersion == null){
            commitVersion = ""
        }
        filesMatching(["**/*.yml", "**/*.xml"]) {
            expand version: project.version,
                    group: project.group,
                    name: project.name,
                    serviceCode: project.name.toUpperCase(),
                    appBuiltTime: new Date().getTime(),
                    commitVersion: commitVersion
        }
    }

    dependencies {
        implementation(group: 'org.projectlombok', name: 'lombok', version: '1.18.4')

        implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jacksonVersion}")
        implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${jacksonVersion}")
        implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonVersion}")
        implementation(group: 'com.fasterxml.jackson.module', name: 'jackson-module-afterburner', version: "${jacksonVersion}")

        // spring
        implementation(group: "org.springframework.boot", name: "spring-boot-starter-webflux", version: springBootVersion)
        implementation("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")

        implementation("org.springframework.boot:spring-boot-starter-reactor-netty")
        implementation(group: "io.netty", name: "netty-buffer")

        // for test, but also for mock repos
        implementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
        implementation(group: 'io.rest-assured', name: 'json-path', version: '3.0.0')

        implementation(group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.9.+')
        implementation(group: 'io.github.microutils', name: 'kotlin-logging', version: '1.6.10')
        implementation(group: 'io.micrometer', name: 'micrometer-core', version: "${micrometerVersion}")
        implementation(group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.1.3')

    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    task copyJars(type: Copy) {
        from "${buildDir}/libs"
        into "${buildDir}/deploy/module/${project.name}"
    }

    task printName {
        doLast {
            println "${project.name}"
        }
    }
}

 // for service projects
configure(subprojects.findAll { project.ext.serviceProjects.contains(it.name) }) {
    apply plugin: 'org.springframework.boot'

    jar {
        archiveName "service-${project.name}.jar"
    }
}
